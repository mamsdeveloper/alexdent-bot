import smtplib
from functools import partial

from telebot import types

import config
from pagesbot import PagesBot


class AlexDentBot(PagesBot):
	def get_reply_addons(self) -> "tuple[str, list[types.KeyboardButton]]":
		add_text = 'üìû –ó–∞–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫\n\n'
		add_text += 'üåπ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º'

		add_btns = [
			types.KeyboardButton('üìû –ó–∞–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫'),
			types.KeyboardButton('üåπ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º'),
		]

		return add_text, add_btns

	def addons_handler(self, message: types.Message):
		text = message.text

		if text == 'üìû –ó–∞–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫':
			markup = types.ReplyKeyboardMarkup(
				resize_keyboard=True, one_time_keyboard=True)
			markup.add(types.KeyboardButton(
				'–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º', request_contact=True))
			self.send_message(
				message.chat.id,
				'üìû –£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
				reply_markup=markup
			)
			self.register_next_step_handler(message, self.order_call)

		elif text == 'üåπ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º':
			markup = types.ReplyKeyboardMarkup(
				resize_keyboard=True, one_time_keyboard=True)
			markup.add(types.KeyboardButton(
				'–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º', request_contact=True))
			self.send_message(
				message.chat.id,
				'üìû –£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
				reply_markup=markup
			)
			self.register_next_step_handler(message, self.order_appointment_phone)

		else:
			self.send_message(
				message.chat.id,
				'–ù–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã'
			)

	def order_call(self, message: types.Message):
		if message.contact is not None:
			phone = message.contact.phone_number
		else:
			phone = message.text

		mail_text = f'–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞\n–ö–ª–∏–µ–Ω—Ç: {message.chat.first_name} {message.chat.last_name}\n–ù–æ–º–µ—Ä: {phone}'
		self.send_email(mail_text)
		self.send_message(
			message.chat.id,
			'–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ, —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä—ã',
		)
		self.go_root_page(message)

	def order_appointment_phone(self, message: types.Message):
		if message.contact is not None:
			phone = message.contact.phone_number
		else:
			phone = message.text

		self.send_message(
			message.chat.id,
			'üë® –£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –§–ò–û'
		)
		self.register_next_step_handler(
			message, partial(self.order_appointment_name, [phone]))

	def order_appointment_name(self, data: "list[str]", message: types.Message):
		data += [message.text]
		self.send_message(
			message.chat.id,
			'üïë –ù–∞–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É –ø—Ä–∏–µ–º–∞'
		)
		self.register_next_step_handler(
			message, partial(self.order_appointment_date, data))

	def order_appointment_date(self, data: "list[str]", message: types.Message):
		data += [message.text]
	
		doctors = [
			'–ù–µ –≤–∞–∂–Ω–æ, –∫–∞–∫–æ–π –≤—Ä–∞—á',
			'–¢–∞—Ç–∏—Ç—è–Ω—Ü –ê—Ä—Ç—É—Ä –í–∞–ª–µ—Ä—å–µ–≤–∏—á',
			'–ö–æ—Ä–æ—Ç—ã—à –ò–≥–æ—Ä—å –í–∞–ª–µ–Ω—Ç–∏–Ω–æ–≤–∏—á',
			'–¢–∞—Ä–∞—Å–æ–≤–∞ –¢–∞—Ç—å—è–Ω–∞ –í–∏—Ç–∞–ª—å–µ–≤–Ω–∞',
			'–ò—Å–º–∞–∏–ª–æ–≤ –†—É—Å—Ç–∞–º –ï–≤–≥–µ–Ω—å–µ–≤–∏—á',
			'–ë–∞–¥–∞–ª—è–Ω –®–∏—Ä–∞–∑ –ö—Ä–æ–Ω–≤–µ–ª—å–æ–≤–∏—á',
			'–î–∏–ª–±–∞—Ä—è–Ω –ù–∞–∑–µ–ª–∏ –û–≥–∞–Ω–µ—Å–æ–≤–Ω–∞',
			'–ì–æ–ª—É–±–∫–æ–≤–∞ –û–ª–µ—Å—è –í–∞–ª–µ—Ä—å–µ–≤–Ω–∞'
			]

		markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
		markup.add(*[types.KeyboardButton(d) for d in doctors])

		self.send_message(
			message.chat.id,
			'–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞',
			reply_markup=markup
		)
		self.register_next_step_handler(message, partial(self.order_appointment_last, data))

	def order_appointment_last(self, data: "list[str]", message: types.Message):
		data += [message.text]
		phone, name, date, doctor = data

		mail_text = f'–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º\n–ö–ª–∏–µ–Ω—Ç: {name}\n–ù–æ–º–µ—Ä: {phone}\n–î–∞—Ç–∞: {date}\n–í—Ä–∞—á: {doctor}'
		self.send_email(mail_text)
		self.send_message(
			message.chat.id,
			'–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ.\n –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –æ—Ç –Ω–∞—à–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞',
		)
		self.go_root_page(message)

	def send_email(self, text: str):
		domain = config.FROM_EMAIL.split('@')[1]
		server = smtplib.SMTP(
			'smtp.' + domain,
			587 if domain == 'gmail.com' else 465
		)
		server.starttls()
		server.login(config.FROM_EMAIL, config.FROM_EMAIL_PSW)
		server.sendmail(config.FROM_EMAIL, config.TO_EMAIL, text.encode('utf-8'))
		server.quit()


if __name__ == '__main__':
	bot = AlexDentBot('./pages', '–ú–µ–Ω—é', config.TOKEN)
	bot.polling(non_stop=True)
